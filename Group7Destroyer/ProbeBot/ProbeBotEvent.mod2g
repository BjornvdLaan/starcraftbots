use ProbeBot as knowledge.
use "../GenericMods/GenericPredicates" as knowledge.
use "../GenericMods/GenericPercepts" as module.

module ProbeBotEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% Get generic percepts
	if true then GenericPercepts.
	
	% Current state of the probe
	if percept(status(_,_,_,NewCond,_,_)), bel(state(OldCond), NewCond \= OldCond) then delete(state(OldCond)) + insert(state(NewCond)).
	
	% Locations of Mineral fields
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralLoc(Id,Amount,X,Y))) do insert(mineralLoc(Id,Amount,X,Y)).
	forall bel(mineralLoc(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) do delete(mineralLoc(Id,Amount,X,Y)).
	
	% Location of Vespene Geyser
	forall percept(vespeneGeyser(Id,R,Rg,Xv,Yv)), not(bel(vespeneLoc(Id,R,Rg,Xv,Yv))) do insert(vespeneLoc(Id,R,Rg,Xv,Yv)).
	forall bel(vespeneLoc(Id,R,Rg,Xv,Yv)),not(percept(vespeneGeyser(Id,R,Rg,Xv,Yv))) do delete(vespeneLoc(Id,R,Rg,Xv,Yv)).
	
	% Location of Construction Sites
	forall percept(constructionSite(X,Y,B)), not(bel(constructLoc(X,Y,B))) do insert(constructLoc(X,Y,B)).
	forall bel(constructLoc(X,Y,B)),not(percept(constructionSite(X,Y,B))) do delete(constructLoc(X,Y,B)).
	
	% The handling of the capacity percept
	if percept(resources(_, _, C, T)), bel(capacity(OldC, OldT), (not(OldC == C) ; not(OldT == T))) then delete(capacity(OldC, OldT)) + insert(capacity(C, T)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
	
	
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	
	%% Goals for role 'builder', sorted by priority
	% Build Pylon
	if bel(builder, not(unitAmount("Protoss Pylon", PylAmount)), PylAmount = 1) then adopt(unitAmount("Protoss Pylon", 1)).
	
	% Build one Gateway
	if bel(builder, not(unitAmount("Protoss Gateway", _)), unitAmount("Protoss Pylon",_)) then adopt(unitAmount("Protoss Gateway", 1)).
	
	% Build second Gateway
	if bel(builder, unitAmount("Protoss Gateway", 1), unitAmount("Protoss Pylon",_)) then adopt(unitAmount("Protoss Gateway", 2)).
	
	% If there is not enough capacity, build more Pylons after the second Gateway is build
	if bel(builder, unitAmount("Protoss Pylon", PylAmount), PylAmount_Des is PylAmount+1, capacity(CS, TS), TS - CS < 8, unitAmount("Protoss Gateway", GateAmount), GateAmount > 1) then adopt(unitAmount("Protoss Pylon", PylAmount_Des)).
	
	% build Cybernetics Institute when there are two Gateways, so that Dragoons can be trained
	if bel(builder, not(unitAmount("Protos Cybernetics Core",1)), unitAmount("Protoss Pylon",_), unitAmount("Protoss Gateway", 1)) then adopt(unitAmount("Protoss Cybernetics Core", 1)).
	
	% Build Assimilator
	if bel(builder, not(unitAmount("Protoss Assimilator", _))) then adopt(unitAmount("Protoss Assimilator", 1)).
	
	% Build Stargate
	if bel(builder, not(unitAmount("Protoss Stargate", _))) then adopt(unitAmount("Protoss Stargate", 1)).
	
	% Build shield battery, preferably in vicinity of defending units
	if bel(builder, not(unitAmount("Protoss Shield Battery", _))) then adopt(unitAmount("Protoss Shield Battery", 1)).
	
	%% Goals for role 'vespene'
	% If an Assimilator is built, start mining vespene
	if bel(vespene, unitAmount("Protoss Assimilator", AssiAmount), AssiAmount > 0, self(Id, _)) then adopt(workerActivity(Id, gatheringGas)).
	
	%% Goals for probes without role 'vespene'
	% If the worker is not busy, start gathering minerals
	if not(bel(vespene)), bel(self(Id, _)) then adopt(workerActivity(Id, gatheringMinerals)).
		
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	forall bel(mineralLoc(MinId,_,_,_)) do (nexusBot).send(mineralF(MinId)).
	
	% Processing role assignment by Nexus
	if (_).sent(builder) then insert(builder).
	if (_).sent(vespene) then insert(vespene).	
	
}

